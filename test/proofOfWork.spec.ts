/**
 * Tests for ProofOfWork.
 */
import { Hash } from "@iota-pico/data/dist/data/hash";
import { Trytes } from "@iota-pico/data/dist/data/trytes";
import * as chai from "chai";
import * as ffi from "ffi";
import * as fs from "fs";
import * as path from "path";
import { INodePlatform } from "../src/INodePlatform";
import { ProofOfWork } from "../src/proofOfWork";

describe("ProofOfWork", () => {

    it("can be created", () => {
        const obj = new ProofOfWork();
        chai.should().exist(obj);
    });

    describe("initialize", () => {
        it("can fail when lib does not exist", async () => {
            const lstatResult: fs.Stats = <fs.Stats>{};
            lstatResult.isFile = () => false;

            const platform: INodePlatform = {
                pathResolve: path.resolve,
                pathJoin: path.join,
                platform: () => "win32",
                lstat: (f, cb) => cb(undefined, lstatResult),
                loadLibrary: ffi.Library
            };
            const obj = new ProofOfWork(platform);

            try {
                await obj.initialize();
                chai.assert("should not be here");
            } catch (err) {
                chai.expect(err.message).to.contain("does not exist");
            }
        });

        it("can be called on mac", async () => {
            const lstatResult: fs.Stats = <fs.Stats>{};
            lstatResult.isFile = () => true;

            let fname;
            const platform: INodePlatform = {
                pathResolve: path.resolve,
                pathJoin: path.join,
                platform: () => "darwin",
                lstat: (f, cb) => {
                    fname = f;
                    cb(undefined, lstatResult);
                },
                loadLibrary: () => {}
            };
            const obj = new ProofOfWork(platform);

            await obj.initialize();

            chai.expect(fname).to.contain("libccurl.dylib");
        });

        it("can be called on windows", async () => {
            const lstatResult: fs.Stats = <fs.Stats>{};
            lstatResult.isFile = () => true;

            let fname;
            const platform: INodePlatform = {
                pathResolve: path.resolve,
                pathJoin: path.join,
                platform: () => "win32",
                lstat: (f, cb) => {
                    fname = f;
                    cb(undefined, lstatResult);
                },
                loadLibrary: () => {}
            };
            const obj = new ProofOfWork(platform);

            await obj.initialize();

            chai.expect(fname).to.contain("libccurl.dll");
        });

        it("can be called on other platform", async () => {
            const lstatResult: fs.Stats = <fs.Stats>{};
            lstatResult.isFile = () => true;

            let fname;
            const platform: INodePlatform = {
                pathResolve: path.resolve,
                pathJoin: path.join,
                platform: () => "unix",
                lstat: (f, cb) => {
                    fname = f;
                    cb(undefined, lstatResult);
                },
                loadLibrary: () => {}
            };
            const obj = new ProofOfWork(platform);

            await obj.initialize();

            chai.expect(fname).to.contain("libccurl.so");
        });
    });

    describe("performsSingle", () => {
        it("can be called", () => {
            const obj = new ProofOfWork();
            chai.expect(obj.performsSingle()).to.be.equal(true);
        });
    });

    describe("pow", () => {
        it("can fail when not initialized", async () => {
            const obj = new ProofOfWork();
            try {
                await obj.pow(Hash.fromTrytes(Trytes.fromString("A".repeat(81))), Hash.fromTrytes(Trytes.fromString("B".repeat(81))), undefined, undefined);
            } catch (err) {
                chai.expect(err.message).to.contain("have you called initialize");
            }
        });

        it("can fail with no trytes", async () => {
            const obj = new ProofOfWork();
            try {
                await obj.initialize();
                await obj.pow(Hash.fromTrytes(Trytes.fromString("A".repeat(81))), Hash.fromTrytes(Trytes.fromString("B".repeat(81))), undefined, undefined);
            } catch (err) {
                chai.expect(err.message).to.contain("trytes");
            }
        });

        it("can fail with no minWeightMagnitude", async () => {
            const obj = new ProofOfWork();
            // tslint:disable-next-line:max-line-length
            const trinaryString
            try {
                await obj.initialize();
                await obj.pow(Hash.fromTrytes(Trytes.fromString("A".repeat(81))), Hash.fromTrytes(Trytes.fromString("B".repeat(81))), [ Trytes.fromString(trinaryString)], undefined);
            } catch (err) {
                chai.expect(err.message).to.contain("minWeightMagnitude");
            }
        });

        it("can fail if ccurl fails", async () => {
            const lstatResult: fs.Stats = <fs.Stats>{};
            lstatResult.isFile = () => true;

            const lib = {
                ccurl_pow: {
                    async: (trytes: any, mwm: any, cb: any) => {
                        cb("err!");
                    }
                }
            };

            const platform: INodePlatform = {
                pathResolve: path.resolve,
                pathJoin: path.join,
                platform: () => "darwin",
                lstat: (f, cb) => cb(undefined, lstatResult),
                loadLibrary: () => lib
            };
            const obj = new ProofOfWork(platform);

            // tslint:disable-next-line:max-line-length
            const trinaryString
            try {
                await obj.initialize();
                await obj.pow(Hash.fromTrytes(Trytes.fromString("A".repeat(81))), Hash.fromTrytes(Trytes.fromString("B".repeat(81))), [ Trytes.fromString(trinaryString)], 1);
            } catch (err) {
                chai.expect(err.message).to.contain("err!");
            }
        });

        it("can successfully complete mwm 2", async () => {
            // tslint:disable-next-line:max-line-length
            const trinaryString

            const obj = new ProofOfWork();

            await obj.initialize();
            const newTrytes = await obj.pow(undefined, undefined, [Trytes.fromString(trinaryString)], 2);
            const newTrytesString = newTrytes[0].toString();
            // tslint:disable-next-line:max-line-length
            chai.expect(newTrytesString).to.be.equal
        });
    });
});
